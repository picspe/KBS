package WebShopKBS 

import WebShopKBS.Models.Order;
import WebShopKBS.Models.OrderItem;
import WebShopKBS.Models.ItemDiscount;
import WebShopKBS.Models.OrderDiscount;
import WebShopKBS.Models.Order.Customer;
import WebShopKBS.Models.Sale;
import WebShopKBS.Models.ItemCategory;
import sbz.projekat.rest.CustomerController;

rule "Preko 20 pojedinacnih artikala koji ne pripadaju sirokoj potrosnji"
	when
		$bill : Order($billArticle : Items)
		$article : OrderItem(count > 20, item.CategoryId == 1) from $billArticle
	then
		modify ($article) { 
    	Discounts.add(new ItemDiscount($bill , $article , 10, true));
    }
    System.out.println($article.Discounts[0].Percentage);
		System.out.println("pogodio za 20 +  " + $article.OrderItemId);
		  
end

rule "Pojedinacni preko 5 za televizore racunare laptopove"
	lock-on-active true
     when
       	$bill : Order($billArticles : Items)
       	$article : OrderItem(count > 5, Item.Category.Name == "racunar" || Item.Category.Name == "televizor" || Item.Category.Name == "laptop") from $billArticles
    then
        modify ($article) { 
           Discounts.add(new ItemDiscount($bill, $article, 5, true));
        }
        System.out.println("pogodio za 5%  "+$article.OrderItemId);
        
end

rule "preko 5000 i pripada sirokoj"
	lock-on-active true
     when
       	$bill : Order($billArticles : Items)
       	$article : OrderItem(TotalPrice > 5000, artikal.Category.Name = "3") from $billArticles
    then
        modify ($article) { 
            Discounts.add(new ItemDiscount($bill, $article, 7, True));
        }
        System.out.println("pogodio za 5000$  "+$article.OrderItemId);
        
end

// Dodatni popusti

rule "2% ako je kupovan u zadnjih 15 dana"
	lock-on-active true
    when
       	$bill : Order($billArticles : Items)
       	$article : OrderItem(this.lastNDays(15) == true) from $billArticles
    then
        modify ($article) { 
            Discounts.add(new ItemDiscount($bill, $article, 2, false));
        }
        System.out.println("pogodio za ranije od 15 dana  " + $article.OrderItemId);
           
end

rule "1% ako je kupovana kategorija u zadnjih 30 dana"
	lock-on-active true
    when
       	$bill : Order($billArticles : Items)
       	$article : OrderItem(this.lastNDays(30) == true) from $billArticles
    then
        modify ($article) { 
            Discounts.add(new OrderItem($bill, $article, 1, false));
        }
        System.out.println("pogodio za ranije od 30 dana  "+ $article.OrderItemId);
           
end

rule "pripada akcijskoj ponudi"
	lock-on-active true
    when
       	$bill : Order($billArticles : Items, $date : DateTime)
       	$actionEvent : Sale( StartsAt <= $date && EndsAt >= $date, $cats : Categories)
       	$artCats : Category from $cats
       	$article : OrderItem(item.Category.Id == $artCats.Id) from $billArticles
       
    then
        modify ($article) { 
        	Discounts.add(new ItemDiscount($bill, $article, $actionEvent.Discount, true));
        }
        System.out.println("pripada akcijskom dogadjaju  "+ $article.OrderItemId + "  "+$actionEvent.Id);
           
end

// Odradjivanje dodatnig popusta za stavke

rule "add all singular discounts"
	lock-on-active true
    when 
    	$billArticle : OrderItem( $d : Discounts )
    	$totalDisc : Number() from accumulate(
            ItemDiscount(IsBasic == false, $q: Percentage) from $d, 
            			init(float count = $billArticle.bestDiscount();),
            action(count += $q;),
            reverse(count -= $q;),
            result(new Int(count))
        )
     then
     	 modify ($billArticle) { 
            TotalDiscount = (int)$totalDisc);
        };
        modify ($billArticle) { 
            PriceAfterDiscount(($billArticle.Price * (100 - $billArticle.TotalDiscount)) / 100);
        };
        System.out.println("izracunat popust " + $totalDisc);
end

// Odradjivanje popusta za finalni racun

rule "over 200000 give 5%"
	lock-on-active true
    when 
    	$bill : Order($billArticles : Items)
    	$totalDisc : Number(Price > 200000) from accumulate(OrderItem($ouc : this.TotalPrice) from $billArticles,
      	sum($ouc)
      )

     then
     	 modify ($bill) { 
            Discounts.add(new OrderDiscount($bill, 5, true));
        }
        System.out.println("5 % na ukupnu cijenu "+$totalDisc);
end

rule "gold or silver customer"
	lock-on-active true
    when 
      $bill : Order(customer.Category.Name == "gold" || customer.Category.Name == "silver")
        
     then
     	 modify ($bill) { 
           Discounts.add(new OrderDiscount($bill, 1, false));
        }
        System.out.println("1% na ukupnu cenu");
end

rule "users using system over 2 years"
	lock-on-active true
    when 
    	$bill : Order( (System.currentTimeMillis() - kupac.RegistrationDate.Time) / (365 * 24 * 60 * 60 * 1000d)  > 2 )
        
     then
     	 modify ($bill) { 
            Discounts.add(new OrderDiscount($bill, 1, false));
        }
        System.out.println("1% na ukupnu cenu sstar korisnik ");
end

rule "preko 50000 i barem 10 artikla 50% cene od ukupne"
	lock-on-active true
      when 
    	$bill : Order($billArticles : Items)
    	$totalDisc : Number(TotalPrice>50000) from accumulate(OrderItem($ouc : this.Price) from $billArticles,
      	sum($ouc)
      ) and 
      $totalDisc1 : Number(TotalPrice>10) from accumulate(OrderItem(this.Price > 0.5 * new Int($totalDisc)) from $billArticles,
        		init(int count = 0;),
        action(count += 1;),
        reverse(count -= -1;),
        result(count)
      )
        
     then
     	 modify ($bill) { 
            Discounts.add(new OrderItem($bill, 3, false));
        }
        System.out.println("onaj teski "+$totalDisc1);

end

rule "calculate final bill discount"
	lock-on-active true
    when 
    	$bill : Order( $d : Items )
    	$totalDisc : Number() from accumulate(OrderDiscount($q: Percentage) from $d,
            			init(float count = 0;),
            action(count += $q;),
            reverse(count -= $q;),
            result(count)
        )
     then
     	 modify ($bill) { 
            TotalDiscount = (int)$totalDisc;
        }
        System.out.println("izracunat popust "+ $totalDisc);
end